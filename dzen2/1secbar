#!/bin/bash

# for labels such as MPD, SYS ...
LABELCOL="#fffafa"
LABELWRAPCOL="#333332"
# for all dynamic information read from system
INFOCOL="#C0C0C0"
# for tags such as cpu, mem ...
TAGCOL="#deb887"
# for symbols such as mB, % ...
SYMCOL="#9d9d9d"
# bar color
BGCOL="#303030"
# bar text color
FGCOL="#707070"
#wrapper color
WRAPCOL="#1a1a1b"

# module corners
LCOR="^i(/home/cas/stumpwm/dzen2/icons/myicons/corner-left.xbm)"
RCOR="^i(/home/cas/stumpwm/dzen2/icons/myicons/corner-right.xbm)"


# update time in secs
UPDATE=1

# used for switching displayed music info
COUNT=0

# pads modules
function pad { 
    C=0
    while [ "$C" -lt $1 ]; do
	echo -n " "
	C=$(( $C + 1 ))
    done
    echo -n "^bg()"
}

function outputinfo {
        STRLEN=$(expr length "$1" )
	PAD=$(( $3 - $STRLEN ))
	echo -n "^fg($WRAPCOL)$LCOR^fg()^bg($WRAPCOL)$2^fg()"
	pad $PAD
	echo -n "^bg()^fg($WRAPCOL)$RCOR"
}

while :;  do

    sleep $UPDATE;
    echo -n "^fg($LABELWRAPCOL)$LCOR^bg($LABELWRAPCOL)^fg($LABELCOL)MPD:^bg()^fg($LABELWRAPCOL)$RCOR" # main label
    
    # check if daemon is running
    STATE=$(mpc | grep "\[")

    # if mpd isn't running, display padded module with info
    if [ "$STATE" = "" ]; then 
        outputinfo "Daemon stopped..." "^fg($SYMCOL)Daemon stopped...^fg()" 25
        outputinfo "stopped..." "^fg($SYMCOL)stopped...^fg()" 22
    else # mpd is running
	ARTIST=$(mpc -f %artist% | head -n 1) # grab artist name
	STRLEN=$(expr length "$ARTIST") # restrict length
	if [ $STRLEN  -gt 14 ]; then
		ARTIST="${ARTIST:0:14}..."
	fi

	ALBUM=$(mpc -f %album% | head -n 1 | sed -e 's/é/e/') # grab album name
	STRLEN=$(expr length "$ALBUM") # restrict length
	if [ $STRLEN  -gt 14 ]; then
		ALBUM="${ALBUM:0:14}..."
	fi

	TRACK=$(mpc -f %track% | head -n 1) # grab track nr
	TITLE=`mpc -f %title% | head -n 1 | sed -e 's/\[//' | sed -e 's/\]//' | sed -e 's/é/e/'` # grab song title
	SONG="$TRACK - $TITLE" # combine
	STRLEN=$(expr length "$SONG") # restrict length (+1 for shorter label)
	if [ $STRLEN  -gt 14 ]; then
		SONG="${SONG:0:14}..."
	fi

	POS=$(mpc | grep "\[" | awk '{print $3}' | sed 's/\/.*//') 
	LENGTH=$(mpc | grep "\[" | awk '{print $3}' | sed 's/.*\///')
	
	# music info module switches between artist, album and song (each displayed for 2 secs)
        case $COUNT in

	[0-1])    outputinfo "Artist: $ARTIST" "^fg($TAGCOL)Artist:^fg() ^fg($INFOCOL)$ARTIST^fg()" 25
		;;
	[2-3])    outputinfo "Album: $ALBUM" "^fg($TAGCOL)Album:^fg() ^fg($INFOCOL)$ALBUM^fg()" 25
		;;
	[4-5])    outputinfo "Song: $SONG" "^fg($TAGCOL)Song:^fg() ^fg($INFOCOL)$SONG^fg()" 25
		;;
	esac
        # reset counter after 5 loops
	if [ "$COUNT" = "5" ]; then
	    COUNT=0
        else
	    COUNT=$(($COUNT + 1))
	fi

	# pause/playing and progress module
	STATE=$(mpc | grep "\[" | awk '{print $1}') #check if paused
        if [ "$STATE" = "[paused]" ]; then
            outputinfo "paused   $POS / $LENGTH" "^fg($SYMCOL)paused^fg()   ^fg($INFOCOL)$POS^fg() ^fg($SYMCOL)/^fg() ^fg($INFOCOL)$LENGTH^fg()" 22
        else
            outputinfo "playing  $POS / $LENGTH" "^fg($SYMCOL)playing^fg()  ^fg($INFOCOL)$POS^fg() ^fg($SYMCOL)/^fg() ^fg($INFOCOL)$LENGTH^fg()" 22
        fi


    fi    

    # newline, as required by dzen2
    echo ""

done | dzen2 -x 0 -y 1034 -h 12 -w 600 -ta l -fg $FGCOL -bg $BGCOL -fn "-*-dejavu sans mono-extralight-r-*-*-9-*-*-*-*-*-*-*"
